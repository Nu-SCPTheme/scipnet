#!/usr/bin/python3

# generate_deeds_typings.py
#
# scipnet - Frontend scripts for mekhane
# Copyright (C) 2019 not_a_seagull
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import os
import shutil
import subprocess
import sys

if "cleanup" in sys.argv:
  shutil.copyfile("src/deeds/index-backup.js", "src/deeds/index.js")
  os.remove("src/deeds/index-backup.js")
  os.remove("src/deeds/index.ts")
  sys.exit(0)

from read_requests import read_requests

deeds_typings = ["""// this file was automatically generated by generate-deeds-typings.py, please consult that file for more information

import * as BluebirdPromise from "bluebird";
import { DeedsSuccessResult, makeDeedsRequest } from "./basic-request";
"""]

deeds_functions = read_requests()

def get_param_name(param):
  if "param-name" in param:
    return param["param-name"]
  else:
    return param["name"]

# run over each deed function
for deeds_function in deeds_functions: 
  args = []
  body = ["{"]
  body_parts = []
  for param in deeds_function["body"]:
    args.append("{}:{}".format(get_param_name(param), param["type"]))
    body_parts.append('"{}": {}'.format(param["name"], get_param_name(param)))
  body.append(",".join(body_parts))
  body.append("}")

  fn_signature = "export function {}({}): BluebirdPromise<DeedsSuccessResult>".format(deeds_function["name"], ",".join(args)) 
  fn = [fn_signature]

  if "compile" in sys.argv: 
    fn_body = """ {{
      return await makeDeedsRequest({{
        body: {},
        reqInformation: {{
          method: "{}",
          methodClass: "{}",
          requestType: "{}"
        }}
      }}, "{}", "{}"); 
    }}""".format("".join(body), deeds_function["method"], deeds_function["method-class"], deeds_function["request-type"], deeds_function["singular-verb"], deeds_function["plural-verb"]);
    fn.append(fn_body)
  else:
    fn.append(";")
  deeds_typings.append("".join(fn));
  deeds_typings.append("\n")

# export to file
if "compile" in sys.argv:
  shutil.copyfile("src/deeds/index.js", "src/deeds/index-backup.js")
  os.remove("src/deeds/index.js")
  with open("src/deeds/index.ts", "w") as f:
    f.write("".join(deeds_typings))
  
  # run typescript
  tsc = subprocess.Popen(["tsc", "src/deeds/index.ts"])
  print(tsc.communicate()[0].decode("utf-8"))
  if tsc.wait() != 0:
    sys.exit(1)
else:
  with open("src/deeds/index.d.ts", "w") as f:
    f.write("".join(deeds_typings))
